============================
7. Integer validator modules
============================

Import module:
============================

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

Function:
=========
Write a class BaseGeometry (based on 6-base_geometry.py).

    * You can assume name is always a string
    * If value is not an integer: raises a TypeError exception
    * If value is less or equal to 0: raises a ValueError exception

Section // No exceptions
=========================
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)

Section // TypeError
====================

    Test case with not an infinte float value:
    >>> try:
    ...     bg.integer_validator("inf_float", 1e400)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    Test case with not an NaN value:
    >>> try:
    ...     bg.integer_validator("nan", float('nan'))
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    Test case with not an boolean value:
    >>> try:
    ...     bg.integer_validator("nan", True)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    Test case with not an string value:
    >>> try:
    ...     bg.integer_validator("name", "Monty Python")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    Test case with not an none value:
    >>> try:
    ...     bg.integer_validator("name", None)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    Test case with not an class value:
    >>> try:
    ...     bg.integer_validator("name", object)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    Test case without value:
    >>> try:
    ...     bg.integer_validator("name")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] integer_validator() missing 1 required positional argument: 'value'

    Test case without value:
    >>> try:
    ...     bg.integer_validator()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    integer_validator() missing 2 required positional argument: 'name' and 'value'

Section // TypeError
====================

    Test case with zero as value:
    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

    Test case with value less than zero:
    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

Section // General Error
========================

    Test case with a not available method
    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented
